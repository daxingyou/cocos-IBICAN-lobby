var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
* name
*/
var ccPlugins;
(function (ccPlugins) {
    var CCLocalTimePlugin = (function (_super) {
        __extends(CCLocalTimePlugin, _super);
        // protected date: Date;
        function CCLocalTimePlugin() {
            return _super.call(this) || this;
            // this.date = new Date();
            // this.date.
        }
        /**
         * 获取本地时间的接口扩展
         */
        CCLocalTimePlugin.prototype.getLocalTime = function () {
            return (new Date()).getTime();
        };
        /**
         * 插件开始时的回调
         * @param resultHandler
         * @param startupArgs
         */
        CCLocalTimePlugin.prototype.onStart = function (resultHandler, startupArgs) {
            resultHandler.success();
        };
        /**
         * 插件停止时的回调
         * @param resultHandler
         */
        CCLocalTimePlugin.prototype.onStop = function (resultHandler) {
            resultHandler.success();
        };
        /**
         * 插件重启时的回调
         * @param resultHandler
         */
        CCLocalTimePlugin.prototype.onRestart = function (resultHandler) {
            resultHandler.success();
        };
        return CCLocalTimePlugin;
    }(rigger.AbsServicePlugin));
    ccPlugins.CCLocalTimePlugin = CCLocalTimePlugin;
})(ccPlugins || (ccPlugins = {}));
